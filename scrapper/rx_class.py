from typing import List, Optional
from requests import request
from sys import argv

from .utils import DOMAIN

def __rx_class(path: str, **kwargs):
    """Internal helper function to make API requests"""

    url = f'{DOMAIN}/REST/rxclass/{path}.json'
    r = request('GET', url, params=kwargs if kwargs else None)
    if r.status_code != 200:
        return None
    return r.json()

def get_all_classes(classTypes: Optional[List[str]] = None):
    """
    Get all classes, or classes of certain types (the classTypes parameter).

    Args:
        class_types: List of class types to filter by
        
    Returns:
        API response as dict or None if request fails
    """
    ty = None
    if classTypes is not None:
        ty = ''.join(classTypes)
    return __rx_class("allClasses", classTypes=ty)


def get_class_types() -> Optional[List[str]]:
    """
    [DEPRECATED - use CLASS_TYPES instead]
    Internal function used only during project setup to generate the CLASS_TYPES constant.
    This makes an actual API call to fetch class types.
    
    For normal usage, always use the pre-generated CLASS_TYPES constant instead,
    which contains the same values without making network requests.

    Get the class types. The resources findClassByName, getClassTree, getClassGraphBySource, and getAllClasses use the class types as filters for the output. 

    Returns:
        List of class type names or None if request fails
    """
    tys = __rx_class("classTypes")
    if tys is None:
        return None

    return tys['classTypeList']['classTypeName']

def __populate_class_types():
    types = get_class_types()
    if types is None:
        raise RuntimeError("failed to get types")

    s = 'CLASS_TYPES : List[str] = [' + ''.join([f'"{ty}", ' for ty in types]) + ']'
    with open('scrapper/generated/rx_class/rx_classes.py', 'w+') as file:
        file.write('# file generated by scrapper.rx_class.populate_class_types\n')
        file.write('from typing import List\n')
        file.write(s)

try:
    from scrapper.generated.rx_class.rx_classes import CLASS_TYPES as CT
    CLASS_TYPES = CT
except ImportError as e:
    if len(argv) > 1 and argv[1] == "generate":
        __populate_class_types()
    else:
        raise RuntimeError(
            'Generated files missing or broken. '
            'Generate them with "python -m scrapper generate"',
            e
        )
